Day 1 (today): Player Movement and Basic Rendering
Player Movement:
Goal: Ensure smooth movement with key handling (WASD or arrow keys).
Handle boundaries (player should not be able to move outside the map or into walls).
Rendering:
Goal: Render the player sprite properly based on player position.
Ensure the grid loads, and player sprite is visible in the correct positions as you move.
Since the map validation and floodfill are already done, focus on testing player interaction with the map, player sprite rendering, and key input handling.

Day 2: Implement Collectibles and Exit Logic
Collectibles:

Goal: Add the collectible sprite and update the state when a collectible is "collected."
Track the remaining collectibles and check if the player has collected all of them before allowing them to exit.
Exit Logic:

Goal: Ensure the player can only exit when they’ve collected all collectibles. You can add a simple game over condition or "you win" message when the player reaches the exit with everything collected.
Day 3: Enemies and Collision
Enemies:

Goal: Place one or two static enemies on the map.
Implement basic player-enemy collision (e.g., game over when the player touches an enemy).
Player-Enemy Collision:

Goal: Ensure the game ends or resets when the player collides with an enemy.
Day 4: Polish, Debug, and Testing
Testing:

Test all game functionality: movement, collectibles, exit, enemy collision.
Handle edge cases (e.g., exiting before collecting all items, colliding with enemies, and reaching boundaries).
Polish:

Clean up the code.
Ensure proper rendering and interactions, and smooth out any issues.
Final Testing:

Do full playthroughs of the game to make sure everything works together.

_______________________________________________________________________________________________________________
_______________________________________________________________________________________________________________

What is a Structure in C?
A structure (struct) is a user-defined data type in C that groups together different types of variables (called members) under a single name. It’s useful when you need to store multiple pieces of related data.

Defining a Structure:
To define a structure in C, you use the struct keyword, followed by the structure name and the members inside it.

struct struct_name {
    type member1;
    type member2;
    // more members...
};

struct Person {
    char name[50];
    int age;
    float height;
};

struct Person is the structure name.
The members are:
char name[50] (array of characters for the name)
int age (integer for the age)
float height (float for the height)
Declaring Structure Variables:
Once the structure is defined, you can create variables (instances) of that structure.

struct Person person1;  // Declare a variable of type struct Person

Accessing Members:
To access the members of a structure, you use the dot operator (.).

person1.age = 25;      // Set age
person1.height = 5.9;  // Set height
strcpy(person1.name, "John"); // Set name using string copy (for arrays)

To access and print the structure members:
printf("Name: %s\n", person1.name);
printf("Age: %d\n", person1.age);
printf("Height: %.2f\n", person1.height);

Pointers to Structures:
You can also have pointers to structures. Instead of using the dot operator (.), you use the arrow operator (->) to access the members of a structure when working with pointers.

Example:
struct Person *ptr = &person1;  // Pointer to person1

// Using the arrow operator to access members via the pointer
ptr->age = 30;
ptr->height = 6.0;
strcpy(ptr->name, "Alice");

printf("Name: %s\n", ptr->name);
printf("Age: %d\n", ptr->age);
printf("Height: %.2f\n", ptr->height);

Using typedef with Structures:
To avoid having to use the struct keyword every time you declare a variable, you can use typedef.

Example:
typedef struct {
    char name[50];
    int age;
    float height;
} Person;

Now, you can declare a variable of type Person without the need for struct:
Person person1;  // No need for 'struct' anymore

Passing Structures to Functions:
Structures can be passed to functions either by value (copy) or reference (pointer).

Passing by value (copy):
void printPerson(struct Person p) {
    printf("Name: %s\n", p.name);
    printf("Age: %d\n", p.age);
}

printPerson(person1);

Passing by reference (pointer) — more efficient for large structures:
void printPerson(struct Person *p) {
    printf("Name: %s\n", p->name);
    printf("Age: %d\n", p->age);
}

printPerson(&person1);  // Pass address of person1

Summary:
A structure groups different types of variables under one name.
Use the dot operator (.) to access members of a structure.
Pointers to structures use the arrow operator (->) to access members.
typedef can be used to simplify the structure’s usage by removing the need for struct each time.
Structures can be passed by value or by reference to functions.
That’s the basic rundown of structures in C! Let me know if you need further clarification or examples.